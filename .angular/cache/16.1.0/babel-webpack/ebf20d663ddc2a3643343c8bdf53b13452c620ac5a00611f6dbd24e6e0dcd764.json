{"ast":null,"code":"import { LoggerService } from './logger.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./logger.service\";\nimport * as i3 from \"@angular/common\";\nfunction AfterViewComponent_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 1);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.comment, \" \");\n  }\n}\nfunction AfterViewParentComponent_after_view_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"after-view\");\n  }\n}\nfunction AfterViewParentComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(msg_r2);\n  }\n}\n//////////////////\nexport let ChildViewComponent = /*#__PURE__*/(() => {\n  class ChildViewComponent {\n    constructor() {\n      this.hero = 'Magneta';\n    }\n  }\n  ChildViewComponent.ɵfac = function ChildViewComponent_Factory(t) {\n    return new (t || ChildViewComponent)();\n  };\n  ChildViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChildViewComponent,\n    selectors: [[\"app-child-view\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngModel\", \"ngModelChange\"]],\n    template: function ChildViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function ChildViewComponent_Template_input_ngModelChange_0_listener($event) {\n          return ctx.hero = $event;\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngModel\", ctx.hero);\n      }\n    },\n    dependencies: [i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel],\n    encapsulation: 2\n  });\n  return ChildViewComponent;\n})();\n//////////////////////\nexport let AfterViewComponent = /*#__PURE__*/(() => {\n  class AfterViewComponent {\n    constructor(logger) {\n      this.logger = logger;\n      this.prevHero = '';\n      this.comment = '';\n      this.logIt('AfterView constructor');\n    }\n    ngAfterViewInit() {\n      // viewChild is set after the view has been initialized\n      this.logIt('AfterViewInit');\n      this.doSomething();\n    }\n    ngAfterViewChecked() {\n      // viewChild is updated after the view has been checked\n      if (this.prevHero === this.viewChild.hero) {\n        this.logIt('AfterViewChecked (no change)');\n      } else {\n        this.prevHero = this.viewChild.hero;\n        this.logIt('AfterViewChecked');\n        this.doSomething();\n      }\n    }\n    // This surrogate for real business logic sets the `comment`\n    doSomething() {\n      let c = this.viewChild.hero.length > 10 ? `That's a long name` : '';\n      if (c !== this.comment) {\n        // Wait a tick because the component's view has already been checked\n        this.logger.tick_then(() => this.comment = c);\n      }\n    }\n    logIt(method) {\n      let child = this.viewChild;\n      let message = `${method}: ${child ? child.hero : 'no'} child view`;\n      this.logger.log(message);\n    }\n  }\n  AfterViewComponent.ɵfac = function AfterViewComponent_Factory(t) {\n    return new (t || AfterViewComponent)(i0.ɵɵdirectiveInject(i2.LoggerService));\n  };\n  AfterViewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AfterViewComponent,\n    selectors: [[\"after-view\"]],\n    viewQuery: function AfterViewComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ChildViewComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewChild = _t.first);\n      }\n    },\n    decls: 6,\n    vars: 1,\n    consts: [[\"class\", \"comment\", 4, \"ngIf\"], [1, \"comment\"]],\n    template: function AfterViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵtext(1, \"-- child view begins --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"app-child-view\");\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵtext(4, \"-- child view ends --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, AfterViewComponent_p_5_Template, 2, 1, \"p\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.comment);\n      }\n    },\n    dependencies: [i3.NgIf, ChildViewComponent],\n    encapsulation: 2\n  });\n  return AfterViewComponent;\n})();\n//////////////\nexport let AfterViewParentComponent = /*#__PURE__*/(() => {\n  class AfterViewParentComponent {\n    constructor(logger) {\n      this.logger = logger;\n      this.show = true;\n    }\n    reset() {\n      this.logger.clear();\n      // quickly remove and reload AfterViewComponent which recreates it\n      this.show = false;\n      this.logger.tick_then(() => this.show = true);\n    }\n  }\n  AfterViewParentComponent.ɵfac = function AfterViewParentComponent_Factory(t) {\n    return new (t || AfterViewParentComponent)(i0.ɵɵdirectiveInject(i2.LoggerService));\n  };\n  AfterViewParentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AfterViewParentComponent,\n    selectors: [[\"after-view-parent\"]],\n    features: [i0.ɵɵProvidersFeature([LoggerService])],\n    decls: 10,\n    vars: 2,\n    consts: [[1, \"parent\"], [4, \"ngIf\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function AfterViewParentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"AfterView\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, AfterViewParentComponent_after_view_3_Template, 1, 0, \"after-view\", 1);\n        i0.ɵɵelementStart(4, \"h4\");\n        i0.ɵɵtext(5, \"-- AfterView Logs --\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p\")(7, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function AfterViewParentComponent_Template_button_click_7_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵtext(8, \"Reset\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(9, AfterViewParentComponent_div_9_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.show);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.logger.logs);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, AfterViewComponent],\n    styles: [\".parent[_ngcontent-%COMP%]{background:burlywood}\"]\n  });\n  return AfterViewParentComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}