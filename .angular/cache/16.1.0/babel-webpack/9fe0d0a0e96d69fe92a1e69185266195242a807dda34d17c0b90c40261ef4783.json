{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./logger.service\";\nlet nextId = 1;\nexport let PeekABooDirective = /*#__PURE__*/(() => {\n  class PeekABooDirective {\n    constructor(logger) {\n      this.logger = logger;\n    }\n    // implement OnInit's `ngOnInit` method\n    ngOnInit() {\n      this.logIt(`OnInit`);\n    }\n    logIt(msg) {\n      this.logger.log(`#${nextId++} ${msg}`);\n    }\n  }\n  PeekABooDirective.ɵfac = function PeekABooDirective_Factory(t) {\n    return new (t || PeekABooDirective)(i0.ɵɵdirectiveInject(i1.LoggerService));\n  };\n  PeekABooDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: PeekABooDirective\n  });\n  return PeekABooDirective;\n})();\n// Don't HAVE to mention the Lifecycle Hook interfaces\n// unless we want typing and tool support.\nexport let PeekABooComponent = /*#__PURE__*/(() => {\n  class PeekABooComponent extends PeekABooDirective {\n    constructor(logger) {\n      super(logger);\n      this.verb = 'initialized';\n      let is = this.name ? 'is' : 'is not';\n      this.logIt(`name ${is} known at construction`);\n    }\n    // only called for/if there is an @input variable set by parent.\n    ngOnChanges(changes) {\n      let changesMsgs = [];\n      for (let propName in changes) {\n        if (propName === 'name') {\n          let name = changes['name'].currentValue;\n          changesMsgs.push(`name ${this.verb} to \"${name}\"`);\n        } else {\n          changesMsgs.push(propName + ' ' + this.verb);\n        }\n      }\n      this.logIt(`OnChanges: ${changesMsgs.join('; ')}`);\n      this.verb = 'changed'; // next time it will be a change\n    }\n    // Beware! Called frequently!\n    // Called in every change detection cycle anywhere on the page\n    ngDoCheck() {\n      this.logIt(`DoCheck`);\n    }\n    ngAfterContentInit() {\n      this.logIt(`AfterContentInit`);\n    }\n    // Beware! Called frequently!\n    // Called in every change detection cycle anywhere on the page\n    ngAfterContentChecked() {\n      this.logIt(`AfterContentChecked`);\n    }\n    ngAfterViewInit() {\n      this.logIt(`AfterViewInit`);\n    }\n    // Beware! Called frequently!\n    // Called in every change detection cycle anywhere on the page\n    ngAfterViewChecked() {\n      this.logIt(`AfterViewChecked`);\n    }\n    ngOnDestroy() {\n      this.logIt(`OnDestroy`);\n    }\n  }\n  PeekABooComponent.ɵfac = function PeekABooComponent_Factory(t) {\n    return new (t || PeekABooComponent)(i0.ɵɵdirectiveInject(i1.LoggerService));\n  };\n  PeekABooComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PeekABooComponent,\n    selectors: [[\"peek-a-boo\"]],\n    inputs: {\n      name: \"name\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 1,\n    template: function PeekABooComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"Now you see my hero, \", ctx.name, \"\");\n      }\n    },\n    styles: [\"p[_ngcontent-%COMP%]{background:LightYellow;padding:8px}\"]\n  });\n  return PeekABooComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}